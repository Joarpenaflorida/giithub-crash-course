Git

- Free version control system
- Manage source code changes  - website any source code and programming language being used.
- Allow to create snapshots (commits)
- Multiple versions of the same package simultaneously work with versions (branches)
- Move between branches & commits (checkout)

With Git, you can easily roll back to older code snapshots or develop new features without breaking production code.



Git repositories

Git features can be used in projects with Git repositories
    - A repository is a folder used in Git to track all the changes of a given project.
        -> Git commands require a repository in a project

    - To create a Git repositories via git init
        -> Only required once per folder / project

    - Some projects initialize Git for you
        -> e.g. React projects

git init - Initialize a git repository

Create commits

    - git add <file(s)>
        -> State changes for next commit.

      git add index.html subfolder/ note.txt

    - git commit
        -> Create a commit that includes all staged changes.

    - git status
        -> Used to find what are staged and unstaged status of the git repository

    - git revert <id> - Undo Commits
        -> This command creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history).

    - git checkout <id> - Move between commits
        -> This command checks-out content from the repository and puts it in your work tree. It can also have other effects, depending on how the command was invoked. For instance, it can also change which branch you are currently working on. This command doesn't make any changes to the history.

    - git reset --hard <id> - Undo changes by deleting all commits since <id>
        -> This command is a little more complicated. It actually does a couple of different things depending on how it is invoked. It modifies the index (the so-called "staging area"). Or it changes which commit a branch head is currently pointing at. This command may alter existing history (by changing the commit that a branch references).


Key commands

git init
- initialize a git repository (once required per project)

git add <file(s)>
- state code changes (for next commit)

git commit -m ""
- Create a commit for the staged changes (with a message)

git status
- Get the current repository status (e.g. which changes are staged)

git log
- Output a chronologically ordered list of commits

git checkout <id>
- Temporarily move back to commit <id>

git revert <id>
- Revert changes of commit <id> (by creating a new commit)

git reset <id>
- Undo commit(s) up too commit <id> by deleting commits


git add -A (--all)
- Adds everything, so that everything in your folder on disk is represented in the staging area

git add .
- Stages everything, but does not remove files that have been deleted from the disk

git add *
- Stages everything, but not files that begin with a dot & does not remove files that have been deleted from the disk

git add -u (--update)
- Stages only Modified Files, removes files that have been deleted from disk, does not add new

git add <file name 1> <file name 2> Adds only certain file(s)



Git Branches

- Key concepts.

main / master -> is a branch

Branches are containers that contains commits.

git branch <name>
- Create a new branch

git branch
- Get all list of branches

git branch -D <name>
- To delete a specific branch

git checkout -b <name>
- To create a specific branch and directly move to the branch

git merge  <name> -


Github

- Cloud Git repository & service provider.
- Bucket or space to store your code - local or remote
- Storing & managing Git repositories
- Cloud Git repository storage (push & pull)
  - Public & private, team management & more.
- Code management & collaborative development
  - Via "issues", "Projects", "Pull Requests" & more.

- Company created around Git. Allow you to add and store git repositories.

- Cloud storage for your Git repositories -> Backup, cross-device usage, collaborative.

- Public repositories can be viewed by everyone while private cannot.

- Public repositories can only be viewed. Cannot be altered or deleted by everyone.

- Backup cross-device usage, collaboration.


git remote add <name> <url>
git remote add origin "https://github.com/sample/sample.git"

- Connected to local Git repositories

git push

- Local commits are uploaded

git pull

- Remote commits are downloaded

git remote set-url origin

git commit -m "added section"


